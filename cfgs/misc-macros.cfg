[force_move]
enable_force_move: True

# NOTE If you're using a Raspberry Pi, you can uncomment the next 2 lines, optionally.
# [temperature_sensor raspberry_pi]
# sensor_type: temperature_host

# NOTE If you're using a an Orange Pi, you can uncomment the next 3 lines, optionally.
# [temperature_sensor Orange_Pi]
# sensor_type: temperature_host
# sensor_path: /sys/class/thermal/thermal_zone0/temp

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

# NOTE Cancel objects feature is enabled. If you're using a low powered device, comment out [exclude_object].
# Also see [file_manager] section in moonraker.conf.
[exclude_object]

[pause_resume]
[display_status]

[gcode_macro _globals]
variable_bed_temp_over: 10 # NOTE Start print if bed temperature is over by this amount, otherwise wait for temperature drop
variable_kamp_enable: 0 # NOTE Enable(1) or disable(0) KAMP (adaptive mesh)
variable_pre_purge_prime_length: 1.40
gcode:
    # Don't delete this section

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro PURGE_LINE]
gcode:
    {% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}

    #   Misc variables
    {% set extrudeAmount = 26.6 %}
    {% set movementLength = 100.0 %}
    {% set movementSpeed = 15 * 60 %}
    {% set xStart = 250 %}
    {% set yStart = 75 %}

    #   Set safe speeds
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}

    G92 E0.0                                ; reset extruder
    G90                                     ; Absolute positioning
    G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}         ; move to purge position
    G1 Z0.4 F500.0                          ; move to purge height
    M83                                     ; Relative extrusion mode
    G1 E{PRE_PURGE_PRIME_LENGTH} F500       ; pre-purge prime LENGTH SHOULD MATCH YOUR PRINT_END RETRACT
    G1 Y{yStart + movementLength} E{extrudeAmount} F{movementSpeed}       ; intro line 1

    G92 E0.0                                ; reset extruder
    M82                                     ; Absolute extrusion mode
    G1 Z5.0                                 ; move nozzle to prevent scratch

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    
    # Other variables
    {% set bedtempSlicer = bedtemp %}
    {% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
    {% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}

    {% if printer.configfile.settings.safe_z_home %}
        {% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
        {% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
    {% endif %}

    {% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
    {% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
    {% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}

    # If bed-temp-almost is higher than bed-temp by a maximum of bed-temp-over
    {% if bedtempAlmost > bedtemp %}
        {% if (bedtempAlmost - bedtempOver) <= bedtemp %}
            {% set bedtemp = bedtempAlmost %}
        {% endif %}
    {% endif %}

    G90                                                  ; absolute positioning
    M140 S{bedtempAlmost}                                ; set & don't wait for bed temp
    M104 S{hotendtempStepOne}                            ; set & don't wait for hotend temp
    G28 X Y
    {% if printer.configfile.settings.safe_z_home %}
        G1 X{startX} Y{startY} F{maxVelocityAdjusted}
    {% endif %}

    M190 S{bedtempAlmost}                                ; set & wait for bed temp
    {% if kampEnabled == 0 %}
        M104 S{hotendtempStepTwo}                            ; set & don't wait for hotend temp
    {% endif %}
    M190 S{bedtemp}                                      ; set & wait for bed temp
    M140 S{bedtempSlicer}                                ; set & don't wait for bed temp ; set temp to sliced setting regardless

    ATTACH_PROBE_LOCK                                    ; Attach klicky probe and lock 
    G28 Z                                                ; final z homing
    Z_TILT_ADJUST                                        ; Adjust Z Tilt 
    {% if kampEnabled == 0 %}
        BED_MESH_PROFILE LOAD=default                        ; NOTE if not using a mesh, comment out this line
    {% else %}
        BED_MESH_CALIBRATE                                   ; KAMP mesh
    {% endif %}
    DOCK_PROBE_UNLOCK                                    ; Unlock probe and dock
    
    G1 X0 Y0 F{maxVelocityAdjusted}
    M109 S{hotendtemp}                                   ; set & wait for hotend temp

    G1 Z20 F3000                                         ; move nozzle away from bed

[gcode_macro PRINT_END]
gcode:
    {% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}

    M400                                    ; wait for buffer to clear
    G92 E0                                  ; zero the extruder
    G1 E-{PRE_PURGE_PRIME_LENGTH} F400      ; retract filament
    G91                                     ; relative positioning

    #   Set safe speeds
    {% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
    {% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% set lift_height = 25.0 %}
    {% if printer.toolhead.position.z < (max_z - lift_height) %}
        {% set z_safe = lift_height %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F{zVelocityAdjusted}             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}   ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E60 F300                    ; load
    G1 E15 F150                    ; prime nozzle with filament
    M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-70 F1800                  ; retract some, but not too much or it will jam
    M82                            ; set extruder to absolute

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro


        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro _CG28]
# Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 138 # starting position - offset a bit to the right from the brush
variable_start_y: 5 # starting Y position - offset a bit to the front of the brush
variable_start_z: -2   #starting Z height. This should barely touch the surface of the brush
variable_x_min: 102     #left side of the brush 
variable_x_max: 138     #right side of the brush
variable_y_min: 5 #front side of the brush - make sure the nozzle is over the last line of bristles 
variable_y_max: 10 #rear side of the brush - make sure the nozzle is over the first line of bristles
variable_z1: 0.7 # second z height of the nozzle over the brush - this should be with the nozzle slightly sunk in
variable_z2: 0.5 # third z height of the nozzle over the brush - this should be with the nozzle fully sunk into the brush, but not touching the bottom of it.
variable_wipe_qty: 2 #how many times to run the cleaning sequence
variable_wipe_spd: 200 #cleaning speed
variable_raise_distance: 30 # z height after cleaning is done
gcode:

  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  
  G90  ; absolute positioning
  ### Move nozzle to start position
  G1 X{start_x} Y{start_y} F9000
  G1 X{x_max} Y{y_min} F9000
  G1 Z{start_z} F1500
  ### Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe left and right
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  {% for wipes in range(1, (wipe_qty + 1)) %} #wipe diagonally
    G1 Z{start_z} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
   G1 Z{z1} F1500
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_min} F{wipe_spd * 60}
    G1 X{x_max} Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} Y{y_max} F{wipe_spd * 60}
    G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    G1 X{start_x} Y{y_min} F{wipe_spd * 60}
    
    G1 Z{start_z} F1500
  {% endfor %}
  
  G1 X{start_x} Y{start_y} F9000 #go back to starting position
  ## Raise nozzle
  G1 Z{raise_distance} 
