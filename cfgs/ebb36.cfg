## BOARD PINS
[board_pins EBB36_G0B1_v1.2] 
mcu: can0
aliases:
aliases_step:
    EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_limitsw: # these are preferred for endstops (including klicky)
    LIMIT_1=PB7,LIMIT_2=PB5,LIMIT_3=PB6
aliases_bltouch: # these are the dupont connectors for bltouch
    PROBE_1=PB9,PROBE_2=PB8
aliases_fans:
    FAN0=PA1,FAN1=PA0
aliases_thermistors:
    TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters:
    HE0=PB13
aliases_rgb:
    RGBLED=PD3
aliases_adxl:
    ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c:
    AUX0=PB3,AUX1=PB4

## can0
[mcu can0]
canbus_uuid: cf820f75ea26 # run the following command to locate the uuid >   ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0

## can0
[temperature_sensor CANBOARD]
sensor_type: temperature_mcu
sensor_mcu: can0

## HOT END FAN
[heater_fan hotend_fan]
##  Hotend Fan - FAN1
pin: can0:FAN1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

## PART COOLING
[fan]
pin: can0:FAN0
kick_start_time: 0.25
cycle_time: 0.15
off_below: 0.10

## EXTRUDER 
[extruder]
step_pin: can0:EXT_STEP
dir_pin: !can0:EXT_DIR
enable_pin: !can0:EXT_EN
rotation_distance: 26.72306036
gear_ratio: 50:8 #for sherpa mini 8t motor
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: can0:HE0
sensor_pin: can0:TH0
#sensor_type: ATC Semitec 104GT-2  # this is the default for the Revo heater
#sensor_type: EPCOS 100K B57560G104F 
sensor_type: PT1000
#pullup_resistor: 2200            # 4700 is default and does not need defining, 2200 is used for the PT1000             
control: pid
pid_Kp: 30.171 
pid_Ki: 2.483
pid_Kd: 91.649
min_temp: -273.15
min_extrude_temp: -273.15
max_temp: 300
pressure_advance: 0.04

## EXTRUDER MOTOR
[tmc2209 extruder]
uart_pin: can0:EXT_UART
stealthchop_threshold: 0
run_current: 0.35

## ADXL345
[adxl345]
cs_pin: can0:ADXL_CS
spi_software_sclk_pin: can0:ADXL_SCLK
spi_software_mosi_pin: can0:ADXL_MOSI
spi_software_miso_pin: can0:ADXL_MISO
axes_map: -x,-z,y

[resonance_tester]
accel_chip: adxl345
probe_points:
    110,110,20  # an example for a 350mm printer

# RGB
[neopixel my_neopixel]
pin: can0:RGBLED
chain_count: 3
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 1.0
initial_WHITE: 0.0

# [filament_switch_sensor filament_sensor]
# pause_on_runout: True
# #   When set to True, a PAUSE will execute immediately after a runout
# #   is detected. Note that if pause_on_runout is False and the
# #   runout_gcode is omitted then runout detection is disabled. Default
# #   is True.
# #runout_gcode:
# #   A list of G-Code commands to execute after a filament runout is
# #   detected. See docs/Command_Templates.md for G-Code format. If
# #   pause_on_runout is set to True this G-Code will run after the
# #   PAUSE is complete. The default is not to run any G-Code commands.
# #insert_gcode:
# #   A list of G-Code commands to execute after a filament insert is
# #   detected. See docs/Command_Templates.md for G-Code format. The
# #   default is not to run any G-Code commands, which disables insert
# #   detection.
# #event_delay: 3.0
# #   The minimum amount of time in seconds to delay between events.
# #   Events triggered during this time period will be silently
# #   ignored. The default is 3 seconds.
# #pause_delay: 0.5
# #   The amount of time to delay, in seconds, between the pause command
# #   dispatch and execution of the runout_gcode. It may be useful to
# #   increase this delay if OctoPrint exhibits strange pause behavior.
# #   Default is 0.5 seconds.
# switch_pin: ^!can0:PROBE_1
# #   The pin on which the switch is connected. This parameter must be
# #   provided.

[probe]
pin: ^can0:PROBE_2 #Change to where you plug your probe in, endstop or probe pin pulled high (^)
# z_offset: 2 #Measure per your specific setup
x_offset: 0 # negative = left of the nozzle
y_offset: 20 # negative = in front of of the nozzle
speed: 5.0
lift_speed: 15.0
sample_retract_dist: 1
samples: 2
samples_tolerance_retries: 6

[bed_mesh]
speed: 300
horizontal_move_z: 15
mesh_min: 15,25
mesh_max: 220,220
probe_count: 5,5
zero_reference_position: 117.5, 117.5 #This is the position where your nozzle homes to Z0. Adjust according to you setup
algorithm: bicubic
fade_start: 1
fade_end: 10
#fade_target:
#   The z position in which fade should converge. When this value is set
#   to a non-zero value it must be within the range of z-values in the mesh.
#   Users that wish to converge to the z homing position should set this to 0.
#   Default is the average z value of the mesh.
split_delta_z: 0.015
#   The amount of Z difference (in mm) along a move that will
#   trigger a split. Default is .025.
move_check_distance: 3
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
mesh_pps: 4,4
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point. The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
#bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.

# PT100
# [temperature_sensor PT100]
# sensor_type: MAX31865
# sensor_pin: can0:PT100_CS
# spi_bus: spi1
# min_temp: -50
# max_temp: 350
# rtd_reference_r: 430